---

- name: check for an existing deployment
  stat:
    path: "{{ keycloak_jboss_home }}"
  register: existing_deploy
  become: yes

# We don't overwrite an existing deployment by default, as changes
# may have been made within Keycloak's database that would be lost.
# A force variable can be set to overwrite the existing deployment.
- block:
    - name: stop the old keycloak service
      systemd:
        name: keycloak
        state: stopped
      become: yes
      ignore_errors: yes
    - name: remove the old Keycloak deployment
      file:
        path: "{{ keycloak_jboss_home }}"
        state: absent
      become: yes
  when: existing_deploy.stat.exists and keycloak_force_install|bool

- name: check for an existing deployment after possible forced removal
  stat:
    path: "{{ keycloak_jboss_home }}"
  register: existing_deploy
  become: yes

- block:
    - name: perform keycloak install
      debug:
        msg: performing keycloak install

    - name: check if all required variables are set
      fail: msg="The variable keycloak_admin_password must be explicitly set"
      when: keycloak_admin_password is not defined

    - name: set the python interpreter to use on the target
      import_tasks: "{{ role_path }}/tasks/python_2_3_test.yml"

    - name: create local download location
      delegate_to: localhost
      file:
        dest: "{{ keycloak_local_download_dest }}"
        state: directory
      when: not keycloak_archive_on_target

    - name: install dependencies
      package:
        name: "{{ item }}"
      loop:
        - java-1.8.0-openjdk-headless
        - unzip
        - pyOpenSSL
      become: yes

    - name: create Keycloak service user/group
      user:
        name: "{{ keycloak_service_user }}"
        home: /
        shell: /sbin/nologin
        system: yes
        create_home: no
      become: yes

    - name: create Keycloak install location
      file:
        dest: "{{ keycloak_dest }}"
        state: directory
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_group }}"
      become: yes

    - block:
        - name: download Keycloak archive to target
          get_url:
            url: "{{ keycloak_url }}"
            dest: "{{ keycloak_dest }}"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_group }}"
        - name: extract Keycloak archive on target
          unarchive:
            remote_src: yes
            src: "{{ keycloak_dest }}/{{ keycloak_archive }}"
            dest: "{{ keycloak_dest }}"
            creates: "{{ keycloak_jboss_home }}"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_group }}"
          notify:
            - restart keycloak
      become: yes
      when: keycloak_archive_on_target

    - block:
        - name: download Keycloak archive to local
          delegate_to: localhost
          get_url:
            url: "{{ keycloak_url }}"
            dest: "{{ keycloak_local_download_dest }}/{{ keycloak_archive }}"
        - name: extract Keycloak archive on local
          unarchive:
            remote_src: no
            src: "{{ keycloak_local_download_dest }}/{{ keycloak_archive }}"
            dest: "{{ keycloak_dest }}"
            creates: "{{ keycloak_jboss_home }}"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_group }}"
          become: yes
          notify:
            - restart keycloak
      when: not keycloak_archive_on_target

    - name: create Keycloak admin user
      command:
      args:
        argv:
          - "{{ keycloak_jboss_home }}/bin/add-user-keycloak.sh"
          - -rmaster
          - -u{{ keycloak_admin_user }}
          - -p{{ keycloak_admin_password }}
        creates: "{{ keycloak_config_dir }}/keycloak-add-user.json"
      become: yes
      tags:
        - skip_ansible_lint

    - name: validate and set PKCS12 variables
      block:
        - name: Check if the variables are set
          fail:
            msg: keycloak_tls_pkcs12 requires keycloak_tls_pkcs12_alias
          when:
            - keycloak_tls_pkcs12 is defined
            - keycloak_tls_pkcs12_alias is not defined
        - name: Set the PKCS12 alias
          set_fact: keycloak_tls_pkcs12_alias="ansible-keycloak-server"
          when:
            - keycloak_tls_pkcs12 is not defined
        - name: Set the PKCS12 passphrase
          set_fact:
            keycloak_tls_pkcs12_passphrase: >-
                {{ keycloak_tls_pkcs12_passphrase |
                   default(keycloak_admin_password) }}

    - name: Allow Keycloak to generate it's own self-signed cert.
      debug:
        msg: >-
          Keycloak will generate it's own self-signed cert.
          It will not have the correct hostname nor a SAN.
      when:
        - keycloak_tls_key is not defined
        - keycloak_tls_cert is not defined
        - keycloak_tls_pkcs12 is not defined

    - block:
        - name: copy key to PKCS12 location
          copy:
            remote_src: "{{ keycloak_tls_files_on_target }}"
            src: "{{ keycloak_tls_key }}"
            dest: "{{ keycloak_config_dir }}/tls-key.pem"
        - name: copy cert to PKCS12 location
          copy:
            remote_src: "{{ keycloak_tls_files_on_target }}"
            src: "{{ keycloak_tls_cert }}"
            dest: "{{ keycloak_config_dir }}/tls-cert.pem"
        - name: generate PKCS12
          openssl_pkcs12:
            action: export
            force: yes
            path: "{{ keycloak_config_dir }}/{{ keycloak_keystore_name }}"
            passphrase: "{{ keycloak_tls_pkcs12_passphrase }}"
            friendly_name: "{{ keycloak_tls_pkcs12_alias }}"
            privatekey_path: "{{ keycloak_config_dir }}/tls-key.pem"
            certificate_path: "{{ keycloak_config_dir }}/tls-cert.pem"
            owner: "{{ keycloak_service_user }}"
            group: "{{ keycloak_service_group }}"
          register: keycloak_generated_pkcs12_bundle
        - name: remove key from PKCS12 location
          file:
            path: "{{ keycloak_config_dir }}/tls-key.pem"
            state: absent
        - name: remove cert from PKCS12 location
          file:
            path: "{{ keycloak_config_dir }}/tls-cert.pem"
            state: absent
      become: yes
      when:
        - keycloak_tls_key is defined
        - keycloak_tls_cert is defined
        - keycloak_tls_pkcs12 is not defined

    - name: copy user provided PKCS12 bundle to server host
      copy:
        remote_src: "{{ keycloak_tls_files_on_target }}"
        src: "{{ keycloak_tls_pkcs12 }}"
        dest: "{{ keycloak_config_dir }}/{{ keycloak_keystore_name }}"
        owner: "{{ keycloak_service_user }}"
        group: "{{ keycloak_service_group }}"
      become: yes
      when:
        - keycloak_tls_key is not defined
        - keycloak_tls_cert is not defined
        - keycloak_tls_pkcs12 is defined

    - name: install firewalld
      package:
        name: firewalld
      become: yes
      when:
        - keycloak_configure_firewall

    - name: enable and start the firewalld service
      systemd:
        name: firewalld
        enabled: yes
        state: started
      become: yes
      when:
        - keycloak_configure_firewall

    - name: configure firewall for Keycloak ports
      firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: yes
      with_items:
        - "{{ keycloak_http_port }}/tcp"
        - "{{ keycloak_https_port }}/tcp"
      become: yes
      when:
        - keycloak_configure_firewall

    - name: configure sysconfig file for keycloak service
      template:
        src: keycloak-sysconfig.j2
        dest: /etc/sysconfig/keycloak
        owner: root
        group: root
        mode: 0644
      become: yes
      notify:
        - restart keycloak

    - name: configure systemd unit file for keycloak service
      template:
        src: keycloak.service.j2
        dest: /etc/systemd/system/keycloak.service
        owner: root
        group: root
        mode: 0644
      become: yes
      notify:
        - reload systemd
        - restart keycloak

    # Force the handlers to run now, as keycloak needs to be running before
    # the next tasks are executed.
    - meta: flush_handlers

    # The jboss-cli.sh tool requires the management interface to be up,
    # so we wait until it is available.  The management interface comes
    # up in two stages, so we first need to wait for an answer on the port
    # and we still need a long timeout for the jboss-cli.sh tool to wait
    # for internal first-boot initialization to complete.  We must finally
    # restart the keycloak service for our changes to take effect.
    - name: enable TLS in Keycloak server configuration file
      block:
        - name: wait for Keycloak management interface to be available
          wait_for:
            port: "{{ keycloak_management_http_port }}"
            timeout: "{{ keycloak_startup_timeout }}"
        - name: create jboss-cli.sh command file
          template:
            src: standalone-tls-config.cli.j2
            dest: "{{ keycloak_config_dir }}/standalone-tls-config.cli"
            owner: root
            group: root
            mode: 0600
        - name: apply keycloak TLS configuration
          command:
          args:
            argv:
              - "{{ keycloak_jboss_home }}/bin/jboss-cli.sh"
              - --connect
              - --timeout={{ keycloak_jboss_config_connect_timeout }}
              - --command-timeout={{ keycloak_jboss_config_command_timeout }}
              - --file={{ keycloak_config_dir }}/standalone-tls-config.cli
          notify:
            - restart keycloak
          tags:
            - skip_ansible_lint
        - name: clean up jboss-cli-sh command file
          file:
            path: "{{ keycloak_config_dir }}/standalone-tls-config.cli"
            state: absent
      become: yes
      when: (keycloak_tls_pkcs12 is defined) or
            (keycloak_generated_pkcs12_bundle is changed)

    # This part enables both the proxy and https reverse proxy
    #
    # The jboss-cli.sh tool requires the management interface to be up,
    # so we wait until it is available.  The management interface comes
    # up in two stages, so we first need to wait for an answer on the port
    # and we still need a long timeout for the jboss-cli.sh tool to wait
    # for internal first-boot initialization to complete.  We must finally
    # restart the keycloak service for our changes to take effect.
    - name: Enable Keycloak Reverse Proxy Settings
      block:
        - name: wait for Keycloak management interface to be available
          wait_for:
            port: "{{ keycloak_management_http_port }}"
            timeout: "{{ keycloak_startup_timeout }}"
        - name: create jboss-cli.sh command file for reverse proxy
          template:
            src: keycloak-proxy-fwd.cli.j2
            dest: "{{ keycloak_config_dir }}/keycloak-proxy-fwd.cli"
            owner: root
            group: root
            mode: 0600
          when: keycloak_revproxy_forwarding|bool
        - name: apply keycloak reverse proxy configuration
          command:
          args:
            argv:
              - "{{ keycloak_jboss_home }}/bin/jboss-cli.sh"
              - --connect
              - --timeout={{ keycloak_jboss_config_connect_timeout }}
              - --command-timeout={{ keycloak_jboss_config_command_timeout }}
              - --file={{ keycloak_config_dir }}/keycloak-proxy-fwd.cli
          notify:
            - restart keycloak
          tags:
            - skip_ansible_lint
          when: keycloak_revproxy_forwarding|bool

        - name: create jboss-cli.sh command file for https reverse proxy
          template:
            src: keycloak-socket-binding.cli.j2
            dest: "{{ keycloak_config_dir }}/keycloak-socket-binding.cli"
            owner: root
            group: root
            mode: 0600
          when: keycloak_revproxy_https|bool
        - name: apply keycloak reverse https proxy configuration
          command:
          args:
            argv:
              - "{{ keycloak_jboss_home }}/bin/jboss-cli.sh"
              - --connect
              - --timeout={{ keycloak_jboss_config_connect_timeout }}
              - --command-timeout={{ keycloak_jboss_config_command_timeout }}
              - --file={{ keycloak_config_dir }}/keycloak-socket-binding.cli
          notify:
            - restart keycloak
          tags:
            - skip_ansible_lint
          when: keycloak_revproxy_https|bool

        - name: clean up jboss-cli-sh command file
          file:
            path: "{{ keycloak_config_dir }}/keycloak-proxy-fwd.cli"
            state: absent
      become: yes
      when: keycloak_revproxy_forwarding|bool or keycloak_revproxy_https|bool

  when: not existing_deploy.stat.exists
